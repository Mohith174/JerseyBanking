package com.example.project3.rubank.account;
import java.util.Random;

import com.example.project3.rubank.banking.Branch;

/**
 *  AccountNumber class represents the member's account number and any relevant methods to manipulate or validate account numbers.
 *  @author Mohith Kodavati and Nalita Pillay
 */
public class AccountNumber implements Comparable<AccountNumber> {
    // Given
    private static final int SEED = 9999; //for a fix sequence of random numbers.
    private Branch branch;
    private AccountType type;
    private String number; //a 4-digit number generated by the Random object

    // need to instantiate a random num gen
    private static final Random RANDOM_GEN = new Random(SEED);
    
    /**
     * Constructor for AccountNumber
     * @param branch
     * @param type
     */
    public AccountNumber(Branch branch, AccountType type){
        this.branch = branch;
        this.type = type;
        this.number = String.format("%04d", RANDOM_GEN.nextInt(SEED));
        // System.out.println("DEBUG: Generated random number: " + this.number + " for " + branch + " " + type);
    }

    /**
     * getter method for branch
     * @return branch
     */
    public Branch getBranch() {
        return branch;
    }

    /**
     * getter method for type
     * @return type
     */
    public AccountType getType() {
        return type;
    }

    /**
     * getter method for number
     * @return number
     */
    public String getNumber() {
        return number;
    }

    /**
     * setter method for type
     * @param type
     */
    public void setType(AccountType type) {
        this.type = type;
    }

    /**
     * See if two account numbers are equivalent to one another
     * @param obj
     * @return boolean
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof AccountNumber other_accnum)) {
            return false;
        }
        return this.toString().equals(other_accnum.toString());
    }

    /**
     * Compare two account numbers
     * @param num
     * @return int
     */
    @Override
    public int compareTo(AccountNumber num){
        return this.toString().compareTo(num.toString());
    }

    /**
     * Convert account number to string
     * @return String
     */
    @Override
    public String toString(){
        return (branch.getBranchCode() + type.getCode() + number);
    }
}
